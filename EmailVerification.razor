@page "/email-verification"
@using Qalakar.Services
@inject FirebaseAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Email Verification - Qalakar</PageTitle>

<div class="verification-container">
    <div class="verification-wrapper">
        <div class="verification-content">
            <div class="icon-container">
                <span class="email-icon">ðŸ“§</span>
            </div>
            
            <h1>Check Your Email</h1>
            <p class="subtitle">We've sent a verification link to:</p>
            <p class="email-display">@email</p>
            
            <div class="instructions">
                <p>Click the verification link in your email to activate your account.</p>
                <p class="note">Don't see the email? Check your spam folder.</p>
                <div class="email-tips">
                    <h4>Email not arriving?</h4>
                    <ul>
                        <li>Check your spam/junk folder</li>
                        <li>Make sure you entered the correct email address</li>
                        <li>Wait a few minutes - emails can sometimes be delayed</li>
                        <li>Use the "Resend Email" button below if needed</li>
                    </ul>
                </div>
            </div>
            
            <div class="action-buttons">
                <button class="btn-resend" @onclick="HandleResendVerification" disabled="@isResending">
                    @if (isResending)
                    {
                        <span class="spinner"></span>
                        <span>Sending...</span>
                    }
                    else
                    {
                        <span>Resend Email</span>
                    }
                </button>
                
                <button class="btn-signin" @onclick="GoToSignIn">
                    Go to Sign In
                </button>
            </div>
        </div>
    </div>
    
    @if (!string.IsNullOrEmpty(message))
    {
        <div class="message-container @(isSuccess ? "success" : "error")">
            <div class="message-content">
                <span class="message-icon">@(isSuccess ? "âœ“" : "âš ")</span>
                <span>@message</span>
            </div>
        </div>
    }
</div>

<style>
    .verification-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
        padding: 20px;
        background: white;
    }

    .verification-wrapper {
        background: white;
        border-radius: 20px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        width: 100%;
        max-width: 500px;
        animation: slideUp 0.6s ease-out;
        border: 1px solid #e2e8f0;
    }

    @@keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .verification-content {
        padding: 48px 40px;
        text-align: center;
    }

    .icon-container {
        margin-bottom: 24px;
    }

    .email-icon {
        font-size: 64px;
        display: inline-block;
        animation: bounce 2s infinite;
    }

    @@keyframes bounce {
        0%, 20%, 50%, 80%, 100% {
            transform: translateY(0);
        }
        40% {
            transform: translateY(-10px);
        }
        60% {
            transform: translateY(-5px);
        }
    }

    .verification-content h1 {
        margin-bottom: 16px;
        color: #1e293b;
        font-weight: 700;
        font-size: 28px;
    }

    .subtitle {
        color: #64748b;
        font-size: 16px;
        margin-bottom: 8px;
    }

    .email-display {
        color: #3b82f6;
        font-weight: 600;
        font-size: 18px;
        margin-bottom: 32px;
        word-break: break-all;
    }

    .instructions {
        margin-bottom: 32px;
        text-align: left;
    }

    .email-tips {
        background: #f8faff;
        border: 1px solid #e2e8f0;
        border-radius: 8px;
        padding: 16px;
        margin-top: 16px;
    }

    .email-tips h4 {
        color: #374151;
        font-size: 16px;
        margin-bottom: 12px;
        font-weight: 600;
    }

    .email-tips ul {
        color: #64748b;
        margin: 0;
        padding-left: 20px;
    }

    .email-tips li {
        margin-bottom: 8px;
        line-height: 1.4;
    }

    .instructions p {
        color: #64748b;
        margin-bottom: 8px;
        line-height: 1.5;
    }

    .note {
        font-size: 14px;
        color: #94a3b8 !important;
        font-style: italic;
    }

    .action-buttons {
        display: flex;
        flex-direction: column;
        gap: 16px;
    }

    .btn-resend, .btn-signin {
        padding: 16px 24px;
        border: none;
        border-radius: 12px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

    .btn-resend {
        background: linear-gradient(135deg, #3b82f6 0%, #1e40af 100%);
        color: white;
        box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
    }

    .btn-resend:hover:not(:disabled) {
        background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%);
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(37, 99, 235, 0.4);
    }

    .btn-resend:disabled {
        opacity: 0.7;
        cursor: not-allowed;
        transform: none;
    }

    .btn-signin {
        background: transparent;
        color: #3b82f6;
        border: 2px solid #3b82f6;
    }

    .btn-signin:hover {
        background: #3b82f6;
        color: white;
        transform: translateY(-2px);
    }

    .spinner {
        width: 16px;
        height: 16px;
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-top: 2px solid white;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .message-container {
        margin-top: 24px;
        border-radius: 12px;
        width: 100%;
        max-width: 500px;
        animation: slideDown 0.4s ease-out;
    }

    @@keyframes slideDown {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .message-content {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 16px 20px;
    }

    .message-icon {
        font-size: 18px;
        font-weight: bold;
    }

    .message-container.success {
        background: linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%);
        color: #065f46;
        border: 1px solid #a7f3d0;
    }

    .message-container.success .message-icon {
        color: #059669;
    }

    .message-container.error {
        background: linear-gradient(135deg, #fef2f2 0%, #fecaca 100%);
        color: #991b1b;
        border: 1px solid #fca5a5;
    }

    .message-container.error .message-icon {
        color: #dc2626;
    }

    @@media (max-width: 480px) {
        .verification-container {
            padding: 16px;
        }
        
        .verification-content {
            padding: 32px 24px;
        }
        
        .verification-content h1 {
            font-size: 24px;
        }
        
        .email-icon {
            font-size: 48px;
        }
    }
</style>

@code {
    private string email = "";
    private bool isResending = false;
    private string message = "";
    private bool isSuccess = false;

    protected override void OnInitialized()
    {
        var uri = new Uri(Navigation.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        
        if (query.TryGetValue("email", out var emailValue))
        {
            email = emailValue.ToString();
        }
        
        if (string.IsNullOrEmpty(email))
        {
            Navigation.NavigateTo("/signup");
        }
    }

    private async Task HandleResendVerification()
    {
        isResending = true;
        message = "";
        
        var result = await AuthService.ResendVerificationAsync();
        
        ShowMessage(result.Message, result.Success);
        
        isResending = false;
    }

    private void GoToSignIn()
    {
        Navigation.NavigateTo("/auth");
    }

    private void ShowMessage(string msg, bool success)
    {
        message = msg;
        isSuccess = success;
        StateHasChanged();
        
        Task.Delay(5000).ContinueWith(_ =>
        {
            message = "";
            InvokeAsync(StateHasChanged);
        });
    }
}
