@page "/upload-photo"
@using Qalakar.Services
@inject StockPhotoService StockPhotoService
@inject AuthStateService AuthState
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@implements IDisposable

<PageTitle>Upload Photo - Qalakar</PageTitle>

@if (!AuthState.IsInitialized)
{
    <div class="loading-container">
        <div class="loading-content">
            <div class="spinner-large"></div>
            <p>Loading...</p>
        </div>
    </div>
}
else if (!AuthState.IsAuthenticated)
{
    <div class="auth-required">
        <div class="auth-message">
            <div class="auth-icon">üîê</div>
            <h2>Authentication Required</h2>
            <p>You need to be signed in to upload photos.</p>
            <a href="/auth" class="btn-signin">Sign In</a>
        </div>
    </div>
}
else
{
    <div class="upload-container">
        <div class="page-header">
            <div class="header-content">
                <h1>Upload Stock Photo</h1>
                <p>Share your photography with the community</p>
            </div>
        </div>

        <div class="upload-form-container">
            <EditForm Model="uploadModel" OnValidSubmit="HandleUpload" FormName="uploadForm">
                <DataAnnotationsValidator />
                
                <div class="form-sections">
                    <div class="section">
                        <div class="section-header">
                            <span class="section-icon">üì∏</span>
                            <h3>Photo Details</h3>
                        </div>
                        
                        <div class="form-grid">
                            <div class="input-group full-width">
                                <label for="title">Photo Title</label>
                                <InputText @bind-Value="uploadModel.Title" id="title" placeholder="Enter a descriptive title" class="form-input" maxlength="100" />
                                <ValidationMessage For="() => uploadModel.Title" class="validation-message" />
                            </div>
                            
                            <div class="input-group full-width">
                                <label for="description">Description</label>
                                <InputTextArea @bind-Value="uploadModel.Description" id="description" placeholder="Describe your photo" class="form-textarea" rows="3" maxlength="500" />
                                <ValidationMessage For="() => uploadModel.Description" class="validation-message" />
                            </div>
                            
                            <div class="input-group">
                                <label for="category">Category</label>
                                <InputSelect @bind-Value="uploadModel.Category" id="category" class="form-select">
                                    <option value="">Select Category</option>
                                    <option value="Nature">Nature</option>
                                    <option value="Architecture">Architecture</option>
                                    <option value="People">People</option>
                                    <option value="Technology">Technology</option>
                                    <option value="Food">Food</option>
                                    <option value="Travel">Travel</option>
                                    <option value="Business">Business</option>
                                    <option value="Abstract">Abstract</option>
                                    <option value="Other">Other</option>
                                </InputSelect>
                                <ValidationMessage For="() => uploadModel.Category" class="validation-message" />
                            </div>
                            
                            <div class="input-group">
                                <label for="imageUrl">Image URL</label>
                                <InputText @bind-Value="uploadModel.ImageUrl" id="imageUrl" placeholder="https://example.com/photo.jpg" class="form-input" />
                                <ValidationMessage For="() => uploadModel.ImageUrl" class="validation-message" />
                                <small class="help-text">Provide a direct link to your image</small>
                            </div>
                        </div>
                    </div>

                    <div class="section">
                        <div class="section-header">
                            <span class="section-icon">üè∑Ô∏è</span>
                            <h3>Tags</h3>
                        </div>
                        
                        <div class="tags-container">
                            <div class="tags-input-container">
                                <input @bind="currentTag" @onkeypress="HandleTagKeyPress" placeholder="Add tags (press Enter)" class="form-input tag-input" maxlength="30" />
                                <button type="button" class="btn-add-tag" @onclick="AddTag">
                                    <span class="plus-icon">+</span>
                                </button>
                            </div>
                            
                            @if (uploadModel.Tags.Any())
                            {
                                <div class="tags-display">
                                    @foreach (var tag in uploadModel.Tags)
                                    {
                                        <span class="tag-item">
                                            @tag
                                            <button type="button" class="remove-tag" @onclick="() => RemoveTag(tag)">√ó</button>
                                        </span>
                                    }
                                </div>
                            }
                            <small class="help-text">Add relevant tags to help people find your photo</small>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(uploadModel.ImageUrl))
                    {
                        <div class="section">
                            <div class="section-header">
                                <span class="section-icon">üëÅÔ∏è</span>
                                <h3>Preview</h3>
                            </div>
                            
                            <div class="preview-container">
                                <img src="@uploadModel.ImageUrl" alt="Preview" class="preview-image" @onerror="HandlePreviewError" />
                                @if (previewError)
                                {
                                    <div class="preview-error">
                                        <span class="error-icon">‚ö†Ô∏è</span>
                                        <span>Unable to load preview. Please check the image URL.</span>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
                
                <div class="form-actions">
                    <button type="button" class="btn-cancel" @onclick="CancelUpload">
                        Cancel
                    </button>
                    <button type="submit" class="btn-upload" disabled="@isUploading">
                        @if (isUploading)
                        {
                            <span class="spinner"></span>
                            <span>Uploading...</span>
                        }
                        else
                        {
                            <span class="upload-icon">üì§</span>
                            <span>Upload Photo</span>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(message))
{
    <div class="message-container @(isSuccess ? "success" : "error")">
        <div class="message-content">
            <span class="message-icon">@(isSuccess ? "‚úÖ" : "‚ùå")</span>
            <span>@message</span>
        </div>
    </div>
}

<style>
    .upload-container {
        max-width: 1000px;
        margin: 0 auto;
        padding: 2rem;
        background: linear-gradient(to bottom, #f8faff 0%, #ffffff 100%);
        min-height: 100vh;
    }

    .page-header {
        text-align: center;
        margin-bottom: 3rem;
        padding: 2.5rem;
        background: white;
        border-radius: 20px;
        box-shadow: 0 4px 20px rgba(59, 130, 246, 0.08);
        border: 1px solid #f1f5f9;
    }

    .header-content h1 {
        color: #1e293b;
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        letter-spacing: -0.025em;
    }

    .header-content p {
        color: #64748b;
        font-size: 1.1rem;
        margin: 0;
    }

    .upload-form-container {
        background: white;
        border-radius: 20px;
        box-shadow: 0 4px 20px rgba(59, 130, 246, 0.08);
        border: 1px solid #f1f5f9;
        overflow: hidden;
    }

    .form-sections {
        padding: 2rem;
    }

    .section {
        margin-bottom: 2.5rem;
    }

    .section:last-child {
        margin-bottom: 0;
    }

    .section-header {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-bottom: 1.5rem;
        padding-bottom: 0.75rem;
        border-bottom: 2px solid #f1f5f9;
    }

    .section-icon {
        font-size: 1.5rem;
    }

    .section-header h3 {
        color: #1e293b;
        font-size: 1.3rem;
        font-weight: 600;
        margin: 0;
    }

    .form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1.5rem;
    }

    .input-group {
        display: flex;
        flex-direction: column;
    }

    .input-group.full-width {
        grid-column: span 2;
    }

    .input-group label {
        color: #374151;
        font-weight: 600;
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
    }

    .form-input, .form-textarea, .form-select {
        padding: 0.875rem 1rem;
        border: 2px solid #e5e7eb;
        border-radius: 10px;
        font-size: 1rem;
        transition: all 0.3s ease;
        background: #f9fafb;
    }

    .form-input:focus, .form-textarea:focus, .form-select:focus {
        outline: none;
        border-color: #3b82f6;
        background: white;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }

    .help-text {
        color: #64748b;
        font-size: 0.8rem;
        margin-top: 0.25rem;
    }

    .tags-container {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .tags-input-container {
        display: flex;
        gap: 0.5rem;
    }

    .tag-input {
        flex: 1;
    }

    .btn-add-tag {
        background: linear-gradient(135deg, #3b82f6 0%, #1e40af 100%);
        color: white;
        border: none;
        border-radius: 10px;
        padding: 0.875rem 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .btn-add-tag:hover {
        background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%);
        transform: translateY(-1px);
    }

    .tags-display {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .tag-item {
        background: linear-gradient(135deg, #e0f2fe 0%, #bae6fd 100%);
        color: #0284c7;
        padding: 0.5rem 0.75rem;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        border: 1px solid #7dd3fc;
    }

    .remove-tag {
        background: none;
        border: none;
        color: #0284c7;
        cursor: pointer;
        font-size: 1rem;
        font-weight: bold;
        padding: 0;
        line-height: 1;
    }

    .remove-tag:hover {
        color: #dc2626;
    }

    .preview-container {
        border-radius: 12px;
        overflow: hidden;
        border: 2px solid #e5e7eb;
        background: #f9fafb;
    }

    .preview-image {
        width: 100%;
        height: 300px;
        object-fit: cover;
        display: block;
    }

    .preview-error {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        padding: 2rem;
        color: #dc2626;
        background: #fef2f2;
    }

    .form-actions {
        display: flex;
        justify-content: space-between;
        padding: 2rem;
        background: #f8faff;
        border-top: 1px solid #e5e7eb;
    }

    .btn-cancel, .btn-upload {
        padding: 1rem 2rem;
        border-radius: 12px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 1rem;
        border: none;
    }

    .btn-cancel {
        background: transparent;
        color: #64748b;
        border: 2px solid #e5e7eb;
    }

    .btn-cancel:hover {
        background: #f8faff;
        border-color: #cbd5e1;
        color: #475569;
    }

    .btn-upload {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        color: white;
        box-shadow: 0 4px 15px rgba(16, 185, 129, 0.3);
    }

    .btn-upload:hover:not(:disabled) {
        background: linear-gradient(135deg, #059669 0%, #047857 100%);
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(5, 150, 105, 0.4);
    }

    .btn-upload:disabled {
        opacity: 0.7;
        cursor: not-allowed;
        transform: none;
    }

    .spinner {
        width: 16px;
        height: 16px;
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-top: 2px solid white;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .validation-message {
        color: #dc2626;
        font-size: 0.8rem;
        margin-top: 0.25rem;
    }

    .message-container {
        position: fixed;
        bottom: 20px;
        right: 20px;
        border-radius: 12px;
        max-width: 400px;
        animation: slideUp 0.4s ease-out;
        z-index: 1000;
    }

    .message-content {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 16px 20px;
    }

    .message-container.success {
        background: linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%);
        color: #065f46;
        border: 1px solid #a7f3d0;
    }

    .message-container.error {
        background: linear-gradient(135deg, #fef2f2 0%, #fecaca 100%);
        color: #991b1b;
        border: 1px solid #fca5a5;
    }

    @@media (max-width: 768px) {
        .upload-container {
            padding: 1rem;
        }

        .form-grid {
            grid-template-columns: 1fr;
        }

        .input-group.full-width {
            grid-column: span 1;
        }

        .form-actions {
            flex-direction: column;
            gap: 1rem;
        }
    }
</style>

@code {
    private UploadPhotoModel uploadModel = new();
    private string currentTag = "";
    private bool isUploading = false;
    private bool previewError = false;
    private string message = "";
    private bool isSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        AuthState.OnAuthStateChanged += OnAuthStateChanged;
        
        if (!AuthState.IsInitialized)
        {
            await AuthState.InitializeAsync();
        }
    }

    private void OnAuthStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task HandleTagKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            AddTag();
        }
    }

    private void AddTag()
    {
        if (!string.IsNullOrWhiteSpace(currentTag) && !uploadModel.Tags.Contains(currentTag.Trim()))
        {
            uploadModel.Tags.Add(currentTag.Trim());
            currentTag = "";
            StateHasChanged();
        }
    }

    private void RemoveTag(string tag)
    {
        uploadModel.Tags.Remove(tag);
        StateHasChanged();
    }

    private void HandlePreviewError()
    {
        previewError = true;
        StateHasChanged();
    }

    private async Task HandleUpload()
    {
        if (!AuthState.IsAuthenticated || AuthState.CurrentUser == null)
        {
            ShowMessage("You must be signed in to upload photos", false);
            return;
        }

        isUploading = true;
        previewError = false;
        StateHasChanged();

        try
        {
            var photoData = new
            {
                title = uploadModel.Title.Trim(),
                description = uploadModel.Description.Trim(),
                category = uploadModel.Category,
                tags = uploadModel.Tags.Where(t => !string.IsNullOrWhiteSpace(t)).ToList(),
                imageUrl = uploadModel.ImageUrl.Trim(),
                uploadedBy = AuthState.CurrentUser.Uid,
                uploadedByEmail = AuthState.CurrentUser.Email
            };

            var result = await StockPhotoService.AddStockPhotoAsync(photoData);

            if (result.Success)
            {
                ShowMessage("Photo uploaded successfully!", true);
                await Task.Delay(1500);
                Navigation.NavigateTo("/stock-photos");
            }
            else
            {
                ShowMessage(result.Message, false);
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Error uploading photo: {ex.Message}", false);
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }

    private void CancelUpload()
    {
        Navigation.NavigateTo("/stock-photos");
    }

    private void ShowMessage(string msg, bool success)
    {
        message = msg;
        isSuccess = success;
        StateHasChanged();

        Task.Delay(3000).ContinueWith(_ =>
        {
            message = "";
            InvokeAsync(StateHasChanged);
        });
    }

    public void Dispose()
    {
        AuthState.OnAuthStateChanged -= OnAuthStateChanged;
    }

    public class UploadPhotoModel
    {
        [Required(ErrorMessage = "Photo title is required")]
        [StringLength(100, ErrorMessage = "Title cannot exceed 100 characters")]
        public string Title { get; set; } = "";

        [Required(ErrorMessage = "Description is required")]
        [StringLength(500, ErrorMessage = "Description cannot exceed 500 characters")]
        public string Description { get; set; } = "";

        [Required(ErrorMessage = "Category is required")]
        public string Category { get; set; } = "";

        [Required(ErrorMessage = "Image URL is required")]
        [Url(ErrorMessage = "Please enter a valid URL")]
        public string ImageUrl { get; set; } = "";

        public List<string> Tags { get; set; } = new();
    }
}
