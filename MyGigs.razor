@page "/my-gigs"
@using Qalakar.Services
@inject GigService GigService
@inject AuthStateService AuthState
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@implements IDisposable

<PageTitle>My Gigs - Qalakar</PageTitle>

@if (!AuthState.IsInitialized)
{
    <div class="loading-container">
        <div class="loading-content">
            <div class="spinner-large"></div>
            <p>Loading...</p>
        </div>
    </div>
}
else if (!AuthState.IsAuthenticated)
{
    <div class="auth-required">
        <div class="auth-message">
            <div class="auth-icon">üîê</div>
            <h2>Authentication Required</h2>
            <p>You need to be signed in to view your gigs.</p>
            <a href="/auth" class="btn-signin">Sign In</a>
        </div>
    </div>
}
else
{
    <div class="my-gigs-container">
        <div class="page-header">
            <div class="header-content">
                <div class="title-section">
                    <h1>My Gigs</h1>
                    <p>Manage your photography opportunities</p>
                </div>
                <div class="stats-badges">
                    <div class="stat-badge">
                        <span class="stat-number">@userGigs.Count</span>
                        <span class="stat-label">Total Gigs</span>
                    </div>
                </div>
            </div>
            <a href="/post-gig" class="btn-post-new">
                <span class="plus-icon">+</span>
                Post New Gig
            </a>
        </div>

        @if (isLoading)
        {
            <div class="loading-container">
                <div class="loading-content">
                    <div class="spinner-large"></div>
                    <p>Loading your gigs...</p>
                </div>
            </div>
        }
        else if (userGigs.Any())
        {
            <div class="gigs-grid">
                @foreach (var gig in userGigs)
                {
                    <div class="gig-card">
                        @if (!string.IsNullOrEmpty(gig.ImageUrl))
                        {
                            <div class="gig-image">
                                <img src="@gig.ImageUrl" 
                                     alt="@gig.Title" 
                                     loading="lazy" 
                                     @onerror="@(() => HandleImageError(gig))"
                                     style="@(imageErrors.Contains(gig.Id) ? "display:none;" : "")" />
                                @if (imageErrors.Contains(gig.Id))
                                {
                                    <div class="image-error">
                                        <div class="error-icon">üñºÔ∏è</div>
                                        <span>Image not available</span>
                                    </div>
                                }
                                <div class="category-badge">@gig.Category</div>
                            </div>
                        }
                        else
                        {
                            <div class="gig-image-placeholder">
                                <div class="placeholder-content">
                                    <div class="placeholder-icon">üì∏</div>
                                    <span class="placeholder-text">No Image</span>
                                </div>
                                <div class="category-badge">@gig.Category</div>
                            </div>
                        }
                        
                        <div class="gig-content">
                            <div class="gig-header">
                                <h4>@gig.Title</h4>
                                <div class="budget-badge">$@gig.Budget</div>
                            </div>
                            
                            <p class="gig-description">@gig.Description</p>
                            
                            <div class="gig-meta">
                                <div class="meta-item">
                                    <span class="meta-icon">üìç</span>
                                    <span class="meta-value">@gig.Location</span>
                                </div>
                            </div>
                            
                            @if (gig.Dates?.Any() == true)
                            {
                                <div class="available-dates">
                                    <h5>Available Dates</h5>
                                    <div class="dates-list">
                                        @foreach (var date in gig.Dates.Take(2))
                                        {
                                            <span class="date-tag">@date.ToString("MMM dd, yyyy")</span>
                                        }
                                        @if (gig.Dates.Count > 2)
                                        {
                                            <span class="more-dates">+@(gig.Dates.Count - 2) more</span>
                                        }
                                    </div>
                                </div>
                            }
                            
                            <div class="gig-footer">
                                <span class="posted-date">Posted @gig.CreatedAt.ToString("MMM dd, yyyy")</span>
                                <div class="action-buttons">
                                    <button class="btn-edit-main" @onclick="() => OpenEditModal(gig)">
                                        <span class="edit-icon">‚úèÔ∏è</span>
                                        Edit
                                    </button>
                                    <button class="btn-delete-main" @onclick="() => DeleteGig(gig)" title="Delete Gig">
                                        <span class="delete-icon">üóëÔ∏è</span>
                                        Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-icon">üì∏</div>
                <h3>No Gigs Posted Yet</h3>
                <p>You haven't posted any gigs yet. Start by creating your first photography opportunity!</p>
                <a href="/post-gig" class="btn-post-first">
                    <span class="plus-icon">+</span>
                    Post Your First Gig
                </a>
            </div>
        }
    </div>

    @if (editingGig != null)
    {
        <div class="modal-backdrop" @onclick="CloseEditModal">
            <div class="modal-container" @onclick:stopPropagation="true">
                <div class="modal-header">
                    <div class="modal-title">
                        <span class="modal-icon">‚úèÔ∏è</span>
                        <h3>Edit Gig</h3>
                    </div>
                    <button class="btn-close" @onclick="CloseEditModal">
                        <span>√ó</span>
                    </button>
                </div>
                
                <div class="modal-body">
                    <div class="form-sections">
                        <div class="section">
                            <div class="section-header">
                                <span class="section-icon">üìù</span>
                                <h4>Gig Details</h4>
                            </div>
                            
                            <div class="form-grid">
                                <div class="input-group">
                                    <label for="edit-title">Gig Title</label>
                                    <input @bind="editModel.Title" id="edit-title" placeholder="Enter gig title" class="form-input" maxlength="100" />
                                </div>
                                
                                <div class="input-group full-width">
                                    <label for="edit-description">Description</label>
                                    <textarea @bind="editModel.Description" id="edit-description" placeholder="Describe what you're looking for" class="form-textarea" rows="3" maxlength="1000"></textarea>
                                </div>
                                
                                <div class="input-group">
                                    <label for="edit-budget">Budget ($)</label>
                                    <input @bind="editModel.Budget" id="edit-budget" type="number" min="0" step="0.01" placeholder="0.00" class="form-input" />
                                </div>
                                
                                <div class="input-group">
                                    <label for="edit-category">Category</label>
                                    <select @bind="editModel.Category" id="edit-category" class="form-select">
                                        <option value="">Select Category</option>
                                        <option value="Wedding">Wedding</option>
                                        <option value="Portrait">Portrait</option>
                                        <option value="Event">Event</option>
                                        <option value="Product">Product</option>
                                        <option value="Real Estate">Real Estate</option>
                                        <option value="Fashion">Fashion</option>
                                        <option value="Food">Food</option>
                                        <option value="Corporate">Corporate</option>
                                        <option value="Other">Other</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <div class="section">
                            <div class="section-header">
                                <span class="section-icon">üìç</span>
                                <h4>Location & Dates</h4>
                            </div>
                            
                            <div class="form-grid">
                                <div class="input-group full-width">
                                    <label for="edit-location">Location</label>
                                    <input @bind="editModel.Location" id="edit-location" placeholder="City, State or specific venue" class="form-input" maxlength="200" />
                                </div>
                                
                                <div class="input-group full-width">
                                    <label>Available Dates</label>
                                    <div class="dates-container">
                                        @for (int i = 0; i < editAvailableDates.Count; i++)
                                        {
                                            var index = i;
                                            <div class="date-input-row">
                                                <input @bind="editAvailableDates[index]" type="date" class="form-input date-input" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                                                @if (editAvailableDates.Count > 1)
                                                {
                                                    <button type="button" class="btn-remove-date" @onclick="() => RemoveEditDate(index)" title="Remove date">
                                                        <span>√ó</span>
                                                    </button>
                                                }
                                            </div>
                                        }
                                        <button type="button" class="btn-add-date" @onclick="AddEditDate">
                                            <span class="plus-icon">+</span>
                                            <span>Add Date</span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="modal-footer">
                    <button type="button" class="btn-cancel" @onclick="CloseEditModal">
                        <span>Cancel</span>
                    </button>
                    <button type="button" class="btn-save" @onclick="SaveEditedGig" disabled="@isSaving">
                        @if (isSaving)
                        {
                            <span class="spinner"></span>
                            <span>Saving...</span>
                        }
                        else
                        {
                            <span class="save-icon">üíæ</span>
                            <span>Save Changes</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    }
}

@if (!string.IsNullOrEmpty(message))
{
    <div class="message-container @(isSuccess ? "success" : "error")">
        <div class="message-content">
            <span class="message-icon">@(isSuccess ? "‚úÖ" : "‚ùå")</span>
            <span>@message</span>
        </div>
    </div>
}

<style>
    .my-gigs-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
        background: linear-gradient(to bottom, #f8faff 0%, #ffffff 100%);
        min-height: 100vh;
    }

    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 3rem;
        padding: 2.5rem;
        background: white;
        border-radius: 20px;
        box-shadow: 0 4px 20px rgba(59, 130, 246, 0.08);
        border: 1px solid #f1f5f9;
        position: relative;
        overflow: hidden;
    }

    .page-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(135deg, #3b82f6 0%, #1e40af 100%);
    }

    .header-content {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .title-section h1 {
        color: #1e293b;
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        letter-spacing: -0.025em;
        line-height: 1.2;
    }

    .title-section p {
        color: #64748b;
        font-size: 1.1rem;
        margin: 0;
        line-height: 1.5;
    }

    .stats-badges {
        display: flex;
        gap: 1rem;
    }

    .stat-badge {
        background: linear-gradient(135deg, #f8faff 0%, #e0f2fe 100%);
        border: 1px solid #e2e8f0;
        border-radius: 12px;
        padding: 1rem 1.5rem;
        text-align: center;
        transition: all 0.3s ease;
    }

    .stat-badge:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(59, 130, 246, 0.15);
        border-color: #3b82f6;
    }

    .stat-number {
        display: block;
        font-size: 1.8rem;
        font-weight: 700;
        color: #3b82f6;
        line-height: 1;
        margin-bottom: 0.25rem;
    }

    .stat-label {
        font-size: 0.9rem;
        color: #64748b;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .btn-post-new {
        background: linear-gradient(135deg, #3b82f6 0%, #1e40af 100%);
        color: white;
        text-decoration: none;
        padding: 1rem 2rem;
        border-radius: 15px;
        font-weight: 600;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        display: flex;
        align-items: center;
        gap: 0.75rem;
        box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
        border: none;
        cursor: pointer;
        white-space: nowrap;
    }

    .btn-post-new:hover {
        background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%);
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(37, 99, 235, 0.4);
        color: white;
        text-decoration: none;
    }

    .plus-icon {
        font-size: 1.2rem;
        font-weight: bold;
    }

    .gigs-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));
        gap: 2rem;
        animation: fadeInUp 0.6s ease-out;
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .gig-card {
        background: white;
        border-radius: 20px;
        overflow: hidden;
        box-shadow: 0 4px 20px rgba(59, 130, 246, 0.08);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        border: 1px solid #f1f5f9;
        position: relative;
        animation: slideUp 0.6s ease-out;
    }

    @@keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .gig-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 12px 30px rgba(59, 130, 246, 0.12);
        border-color: #e2e8f0;
    }

    .gig-image {
        position: relative;
        height: 200px;
        overflow: hidden;
        background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);
    }

    .gig-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
        display: block;
    }

    .gig-card:hover .gig-image img {
        transform: scale(1.05);
    }

    .image-error {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #f8faff 0%, #e0f2fe 100%);
        color: #64748b;
        font-size: 0.9rem;
        gap: 0.5rem;
    }

    .error-icon {
        font-size: 2rem;
        opacity: 0.6;
    }

    .gig-image-placeholder {
        position: relative;
        height: 200px;
        overflow: hidden;
        background: linear-gradient(135deg, #f8faff 0%, #e0f2fe 100%);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .placeholder-content {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
        color: #64748b;
    }

    .placeholder-icon {
        font-size: 3rem;
        opacity: 0.6;
    }

    .placeholder-text {
        font-size: 0.9rem;
        font-weight: 500;
        opacity: 0.8;
    }

    .category-badge {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.95) 0%, rgba(255, 255, 255, 0.8) 100%);
        color: #3b82f6;
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.3);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        z-index: 2;
    }

    .gig-content {
        padding: 1.5rem;
        display: flex;
        flex-direction: column;
        height: calc(100% - 200px);
    }

    .gig-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 1rem;
        gap: 1rem;
    }

    .gig-header h4 {
        color: #1e293b;
        font-size: 1.3rem;
        font-weight: 600;
        margin: 0;
        line-height: 1.3;
        flex: 1;
    }

    .budget-badge {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        color: white;
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 0.9rem;
        font-weight: 600;
        white-space: nowrap;
        box-shadow: 0 2px 8px rgba(16, 185, 129, 0.3);
    }

    .gig-description {
        color: #64748b;
        line-height: 1.6;
        margin-bottom: 1rem;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .gig-meta {
        margin-bottom: 1rem;
    }

    .meta-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #64748b;
        font-size: 0.9rem;
    }

    .meta-icon {
        font-size: 1rem;
    }

    .available-dates {
        margin-bottom: 1.5rem;
    }

    .available-dates h5 {
        color: #374151;
        font-size: 0.9rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .dates-list {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .date-tag, .more-dates {
        background: linear-gradient(135deg, #e0f2fe 0%, #bae6fd 100%);
        color: #0284c7;
        padding: 4px 10px;
        border-radius: 12px;
        font-size: 0.8rem;
        font-weight: 500;
        border: 1px solid #7dd3fc;
    }

    .more-dates {
        background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);
        color: #64748b;
        border-color: #cbd5e1;
    }

    .gig-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding-top: 1rem;
        border-top: 1px solid #f1f5f9;
        margin-top: auto;
        flex-direction: row;
    }

    @@media (max-width: 768px) {
        .gig-footer {
            flex-direction: column;
            gap: 1rem;
            align-items: stretch;
        }
        
        .action-buttons {
            justify-content: center;
            gap: 1rem;
        }
        
        .btn-edit-main, .btn-delete-main {
            flex: 1;
            justify-content: center;
            min-width: 100px;
            padding: 10px 16px;
        }
    }

    .posted-date {
        color: #94a3b8;
        font-size: 0.85rem;
    }

    .action-buttons {
        display: flex;
        gap: 0.75rem;
        align-items: center;
    }

    .btn-edit-main, .btn-delete-main {
        padding: 8px 16px;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 6px;
        font-size: 0.85rem;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
    }

    .btn-edit-main {
        background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        color: white;
        box-shadow: 0 2px 8px rgba(245, 158, 11, 0.3);
    }

    .btn-edit-main:hover {
        background: linear-gradient(135deg, #d97706 0%, #b45309 100%);
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(245, 158, 11, 0.4);
    }

    .btn-delete-main {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        color: white;
        box-shadow: 0 2px 8px rgba(239, 68, 68, 0.3);
    }

    .btn-delete-main:hover {
        background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(239, 68, 68, 0.4);
    }

    .btn-delete-main .delete-icon, .btn-edit-main .edit-icon {
        font-size: 0.9rem;
    }

    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        background: white;
        border-radius: 20px;
        box-shadow: 0 4px 20px rgba(59, 130, 246, 0.08);
        border: 1px solid #f1f5f9;
        animation: fadeIn 0.6s ease-out;
    }

    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    .empty-icon {
        font-size: 4rem;
        margin-bottom: 1.5rem;
        opacity: 0.6;
    }

    .empty-state h3 {
        color: #1e293b;
        font-size: 1.8rem;
        font-weight: 600;
        margin-bottom: 1rem;
    }

    .empty-state p {
        color: #64748b;
        font-size: 1.1rem;
        margin-bottom: 2rem;
        max-width: 500px;
        margin-left: auto;
        margin-right: auto;
        line-height: 1.6;
    }

    .btn-post-first {
        background: linear-gradient(135deg, #3b82f6 0%, #1e40af 100%);
        color: white;
        text-decoration: none;
        padding: 1rem 2rem;
        border-radius: 15px;
        font-weight: 600;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.75rem;
        box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
    }

    .btn-post-first:hover {
        background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%);
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(37, 99, 235, 0.4);
        color: white;
        text-decoration: none;
    }

    /* Modal Styles */
    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.6);
        backdrop-filter: blur(8px);
        -webkit-backdrop-filter: blur(8px);
        z-index: 1000;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem;
        opacity: 0;
        animation: fadeInBackdrop 0.3s ease-out forwards;
    }

    @@keyframes fadeInBackdrop {
        to {
            opacity: 1;
        }
    }

    .modal-container {
        background: white;
        border-radius: 24px;
        box-shadow: 
            0 25px 50px rgba(0, 0, 0, 0.25),
            0 0 0 1px rgba(255, 255, 255, 0.1);
        max-width: 700px;
        width: 100%;
        max-height: 90vh;
        overflow: hidden;
        position: relative;
        transform: translateY(20px) scale(0.95);
        animation: slideInModal 0.3s ease-out 0.1s forwards;
    }

    @@keyframes slideInModal {
        to {
            transform: translateY(0) scale(1);
        }
    }

    .modal-header {
        background: linear-gradient(135deg, #3b82f6 0%, #1e40af 100%);
        color: white;
        padding: 2rem 2.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: relative;
        overflow: hidden;
    }

    .modal-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.1) 0%, 
            rgba(255, 255, 255, 0.05) 100%);
        pointer-events: none;
    }

    .modal-title {
        display: flex;
        align-items: center;
        gap: 1rem;
        position: relative;
        z-index: 1;
    }

    .modal-icon {
        font-size: 1.5rem;
        padding: 0.5rem;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 12px;
        backdrop-filter: blur(10px);
    }

    .modal-title h3 {
        color: white;
        margin: 0;
        font-size: 1.5rem;
        font-weight: 600;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    .btn-close {
        background: rgba(255, 255, 255, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.3);
        color: white;
        width: 40px;
        height: 40px;
        border-radius: 12px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
        backdrop-filter: blur(10px);
        position: relative;
        z-index: 1;
    }

    .btn-close:hover {
        background: rgba(255, 255, 255, 0.3);
        transform: scale(1.1);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }

    .btn-close span {
        font-size: 1.5rem;
        line-height: 1;
        font-weight: 300;
    }

    .modal-body {
        padding: 2.5rem;
        max-height: 60vh;
        overflow-y: auto;
        scrollbar-width: thin;
        scrollbar-color: #cbd5e1 #f1f5f9;
    }

    .modal-body::-webkit-scrollbar {
        width: 6px;
    }

    .modal-body::-webkit-scrollbar-track {
        background: #f1f5f9;
        border-radius: 3px;
    }

    .modal-body::-webkit-scrollbar-thumb {
        background: #cbd5e1;
        border-radius: 3px;
    }

    .modal-body::-webkit-scrollbar-thumb:hover {
        background: #94a3b8;
    }

    .form-sections {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .section {
        background: #f8faff;
        border: 1px solid #e2e8f0;
        border-radius: 16px;
        padding: 1.5rem;
        transition: all 0.3s ease;
    }

    .section:hover {
        border-color: #cbd5e1;
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.08);
    }

    .section-header {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid #e2e8f0;
    }

    .section-icon {
        font-size: 1.25rem;
        padding: 0.5rem;
        background: linear-gradient(135deg, #3b82f6 0%, #1e40af 100%);
        color: white;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
    }

    .section-header h4 {
        color: #1e293b;
        margin: 0;
        font-size: 1.1rem;
        font-weight: 600;
    }

    .form-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1.5rem;
        align-items: start;
    }

    .input-group {
        display: flex;
        flex-direction: column;
    }

    .input-group.full-width {
        grid-column: 1 / -1;
    }

    .input-group label {
        color: #374151;
        font-weight: 600;
        font-size: 0.9rem;
        margin-bottom: 0.5rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .form-input, .form-textarea, .form-select {
        padding: 12px 16px;
        border: 2px solid #e5e7eb;
        border-radius: 12px;
        font-size: 0.95rem;
        transition: all 0.3s ease;
        background: white;
        color: #1f2937;
    }

    .form-input:focus, .form-textarea:focus, .form-select:focus {
        outline: none;
        border-color: #3b82f6;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        background: #fefefe;
    }

    .form-textarea {
        resize: vertical;
        min-height: 80px;
        font-family: inherit;
    }

    .dates-container {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .date-input-row {
        display: flex;
        gap: 0.75rem;
        align-items: center;
    }

    .date-input {
        flex: 1;
    }

    .btn-remove-date {
        background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%);
        color: #dc2626;
        border: 1px solid #fca5a5;
        border-radius: 10px;
        width: 36px;
        height: 36px;
        cursor: pointer;
        font-weight: bold;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.2rem;
    }

    .btn-remove-date:hover {
        background: linear-gradient(135deg, #fee2e2 0%, #fca5a5 100%);
        transform: scale(1.1);
        box-shadow: 0 4px 12px rgba(220, 38, 38, 0.3);
    }

    .btn-add-date {
        background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
        color: #1e40af;
        border: 2px dashed #3b82f6;
        border-radius: 12px;
        padding: 12px 20px;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        margin-top: 0.5rem;
    }

    .btn-add-date:hover {
        background: linear-gradient(135deg, #bfdbfe 0%, #93c5fd 100%);
        border-color: #1e40af;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
    }

    .modal-footer {
        background: #f8faff;
        border-top: 1px solid #e2e8f0;
        padding: 2rem 2.5rem;
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
    }

    .btn-cancel, .btn-save {
        padding: 12px 24px;
        border-radius: 12px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.95rem;
        border: 2px solid transparent;
    }

    .btn-cancel {
        background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);
        color: #64748b;
        border-color: #cbd5e1;
    }

    .btn-cancel:hover {
        background: linear-gradient(135deg, #e2e8f0 0%, #cbd5e1 100%);
        color: #475569;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .btn-save {
        background: linear-gradient(135deg, #3b82f6 0%, #1e40af 100%);
        color: white;
        box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
        border-color: #3b82f6;
    }

    .btn-save:hover:not(:disabled) {
        background: linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%);
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(37, 99, 235, 0.4);
    }

    .btn-save:disabled {
        opacity: 0.7;
        cursor: not-allowed;
        transform: none;
    }

    .spinner {
        width: 16px;
        height: 16px;
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-top: 2px solid white;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .save-icon {
        font-size: 1.1rem;
    }

    @@media (max-width: 768px) {
        .my-gigs-container {
            padding: 1rem;
        }
        
        .page-header {
            flex-direction: column;
            gap: 1.5rem;
            align-items: stretch;
            padding: 2rem;
        }
        
        .header-content {
            flex-direction: column;
            gap: 1rem;
        }
        
        .stats-badges {
            flex-direction: row;
            justify-content: center;
        }
        
        .gigs-grid {
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }
        
        .title-section h1 {
            font-size: 2rem;
        }
        
        .btn-post-new {
            align-self: center;
        }
        
        .message-container {
            right: 1rem;
            left: 1rem;
            max-width: none;
        }

        .modal-backdrop {
            padding: 1rem;
        }
        
        .modal-container {
            max-height: 95vh;
        }
        
        .modal-header, .modal-body, .modal-footer {
            padding: 1.5rem;
        }
        
        .form-grid {
            grid-template-columns: 1fr;
        }
        
        .modal-footer {
            flex-direction: column;
        }
        
        .btn-cancel, .btn-save {
            width: 100%;
            justify-content: center;
        }
    }
</style>

@code {
    private List<GigModel> userGigs = new();
    private bool isLoading = true;
    private string message = "";
    private bool isSuccess = false;
    private GigModel? editingGig = null;
    private EditGigModel editModel = new();
    private List<DateTime> editAvailableDates = new();
    private bool isSaving = false;
    private HashSet<string> imageErrors = new();

    protected override async Task OnInitializedAsync()
    {
        AuthState.OnAuthStateChanged += OnAuthStateChanged;
        
        if (!AuthState.IsInitialized)
        {
            await AuthState.InitializeAsync();
        }
        
        if (AuthState.IsAuthenticated)
        {
            await LoadUserGigs();
        }
    }

    private void OnAuthStateChanged()
    {
        InvokeAsync(async () =>
        {
            if (AuthState.IsAuthenticated)
            {
                await LoadUserGigs();
            }
            StateHasChanged();
        });
    }

    private async Task LoadUserGigs()
    {
        if (!AuthState.IsAuthenticated || AuthState.CurrentUser == null) return;

        isLoading = true;
        imageErrors.Clear();
        StateHasChanged();

        try
        {
            userGigs = await GigService.GetUserGigsAsync(AuthState.CurrentUser.Uid);
            
            // Debug: Log image URLs to console
            foreach (var gig in userGigs)
            {
                if (!string.IsNullOrEmpty(gig.ImageUrl))
                {
                    await JSRuntime.InvokeVoidAsync("console.log", $"Gig '{gig.Title}' image URL: {gig.ImageUrl}");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("console.log", $"Gig '{gig.Title}' has no image URL");
                }
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Error loading gigs: {ex.Message}", false);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void OpenEditModal(GigModel gig)
    {
        editingGig = gig;
        editModel = new EditGigModel
        {
            Title = gig.Title,
            Description = gig.Description,
            Budget = gig.Budget,
            Location = gig.Location,
            Category = gig.Category
        };
        
        editAvailableDates = gig.Dates?.ToList() ?? new List<DateTime> { DateTime.Today.AddDays(1) };
        
        StateHasChanged();
    }

    private void CloseEditModal()
    {
        editingGig = null;
        editModel = new();
        editAvailableDates = new();
        isSaving = false;
        StateHasChanged();
    }

    private void AddEditDate()
    {
        editAvailableDates.Add(DateTime.Today.AddDays(editAvailableDates.Count + 1));
        StateHasChanged();
    }

    private void RemoveEditDate(int index)
    {
        if (editAvailableDates.Count > 1)
        {
            editAvailableDates.RemoveAt(index);
            StateHasChanged();
        }
    }

    private async Task SaveEditedGig()
    {
        if (editingGig == null || !AuthState.IsAuthenticated) return;

        if (string.IsNullOrWhiteSpace(editModel.Title))
        {
            ShowMessage("Please enter a title for your gig", false);
            return;
        }

        if (string.IsNullOrWhiteSpace(editModel.Description))
        {
            ShowMessage("Please enter a description for your gig", false);
            return;
        }

        if (editModel.Budget <= 0)
        {
            ShowMessage("Please enter a valid budget amount", false);
            return;
        }

        isSaving = true;
        StateHasChanged();

        try
        {
            var updateData = new
            {
                title = editModel.Title.Trim(),
                description = editModel.Description.Trim(),
                budget = editModel.Budget,
                location = editModel.Location?.Trim() ?? "",
                category = editModel.Category,
                availableDates = editAvailableDates.Where(d => d >= DateTime.Today).Select(d => d.ToString("yyyy-MM-dd")).ToList()
            };

            var result = await GigService.UpdateGigAsync(editingGig.Id, updateData);

            if (result.Success)
            {
                // Update the gig in our local list
                editingGig.Title = editModel.Title.Trim();
                editingGig.Description = editModel.Description.Trim();
                editingGig.Budget = editModel.Budget;
                editingGig.Location = editModel.Location?.Trim() ?? "";
                editingGig.Category = editModel.Category;
                editingGig.Dates = editAvailableDates.Where(d => d >= DateTime.Today).ToList();

                ShowMessage("Gig updated successfully!", true);
                CloseEditModal();
            }
            else
            {
                ShowMessage(result.Message, false);
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Error updating gig: {ex.Message}", false);
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task DeleteGig(GigModel gig)
    {
        if (!AuthState.IsAuthenticated || gig.CreatedBy != AuthState.CurrentUser?.Uid)
        {
            ShowMessage("You are not authorized to delete this gig", false);
            return;
        }

        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this gig? This action cannot be undone."))
        {
            try
            {
                var result = await GigService.DeleteGigAsync(gig.Id, AuthState.CurrentUser.Uid);

                if (result.Success)
                {
                    userGigs.Remove(gig);
                    ShowMessage("Gig deleted successfully!", true);
                    StateHasChanged();
                }
                else
                {
                    ShowMessage(result.Message, false);
                }
            }
            catch (Exception ex)
            {
                ShowMessage($"Error deleting gig: {ex.Message}", false);
            }
        }
    }

    private void ShowMessage(string msg, bool success)
    {
        message = msg;
        isSuccess = success;
        StateHasChanged();

        Task.Delay(3000).ContinueWith(_ =>
        {
            message = "";
            InvokeAsync(StateHasChanged);
        });
    }

    private void HandleImageError(GigModel gig)
    {
        imageErrors.Add(gig.Id);
        StateHasChanged();
        
        // Log the error to console for debugging
        JSRuntime.InvokeVoidAsync("console.error", $"Failed to load image for gig '{gig.Title}': {gig.ImageUrl}");
    }

    public void Dispose()
    {
        AuthState.OnAuthStateChanged -= OnAuthStateChanged;
    }

    public class EditGigModel
    {
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public decimal Budget { get; set; }
        public string Location { get; set; } = "";
        public string Category { get; set; } = "";
    }
}