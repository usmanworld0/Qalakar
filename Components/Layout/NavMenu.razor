@using Qalakar.Services
@inject FirebaseAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Qalakar</a>
        @if (isUserAuthenticated)
        {
            <div class="user-info">
                <span class="user-email">@userEmail</span>
                <button class="btn-logout" @onclick="HandleLogout" title="Logout">
                    <span class="bi bi-box-arrow-right"></span>
                </button>
            </div>
        }
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="gigs" Match="NavLinkMatch.Prefix">
                <span class="bi bi-camera-fill" aria-hidden="true"></span> Browse Gigs
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="stock-photos" Match="NavLinkMatch.Prefix">
                <span class="bi bi-images" aria-hidden="true"></span> Stock Photos
            </NavLink>
        </div>

        @if (isUserAuthenticated)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="post-gig" Match="NavLinkMatch.Prefix">
                    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Post Gig
                </NavLink>
            </div>
            
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="my-gigs" Match="NavLinkMatch.Prefix">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> My Gigs
                </NavLink>
            </div>
            
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="upload-photo" Match="NavLinkMatch.Prefix">
                    <span class="bi bi-camera-fill" aria-hidden="true"></span> Upload Photo
                </NavLink>
            </div>
            
            <div class="nav-item px-3 logout-nav">
                <button class="nav-link logout-link" @onclick="HandleLogout">
                    <span class="bi bi-box-arrow-right" aria-hidden="true"></span> Logout
                </button>
            </div>
        }
        else
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="auth" Match="NavLinkMatch.Prefix">
                    <span class="bi bi-person" aria-hidden="true"></span> Sign In
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="signup" Match="NavLinkMatch.Prefix">
                    <span class="bi bi-person-plus" aria-hidden="true"></span> Sign Up
                </NavLink>
            </div>
        }
    </nav>
</div>

<style>
    .user-info {
        display: flex;
        align-items: center;
        gap: 12px;
        color: white;
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.2) 0%, rgba(255, 255, 255, 0.1) 100%);
        padding: 10px 14px;
        border-radius: 12px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .user-email {
        font-size: 0.9rem;
        color: white;
        max-width: 150px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        font-weight: 500;
    }

    .btn-logout {
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.2) 0%, rgba(255, 255, 255, 0.1) 100%);
        border: 1px solid rgba(255, 255, 255, 0.3);
        color: white;
        cursor: pointer;
        padding: 8px 10px;
        border-radius: 8px;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .btn-logout:hover {
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.3) 0%, rgba(255, 255, 255, 0.2) 100%);
        transform: scale(1.05);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    }

    .logout-nav {
        margin-top: auto;
        border-top: 1px solid rgba(255, 255, 255, 0.2);
        padding-top: 1rem;
    }

    .logout-link {
        background: none !important;
        border: none !important;
        width: 100% !important;
        text-align: left !important;
        padding: 0.75rem 1rem !important;
        cursor: pointer;
        border-radius: 10px !important;
        transition: all 0.3s ease !important;
    }

    .logout-link:hover {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%) !important;
        color: white !important;
        transform: translateX(6px) !important;
        box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3) !important;
    }

    .bi-box-arrow-right {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' class='bi bi-box-arrow-right' viewBox='0 0 16 16'%3E%3Cpath fill-rule='evenodd' d='M10 12.5a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 1 0v-2A1.5 1.5 0 0 0 9.5 2h-8A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-2a.5.5 0 0 0-1 0v2z'/%3E%3Cpath fill-rule='evenodd' d='m15.854 8.354-3-3a.5.5 0 0 0-.708.708L14.293 8H5.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3a.5.5 0 0 0 0-.708z'/%3E%3C/svg%3E");
    }

    .bi-person {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='white' class='bi bi-person' viewBox='0 0 16 16'%3E%3Cpath d='M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6Zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0Zm4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4Zm-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10Z'/%3E%3C/svg%3E");
    }

    .bi-person-plus {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='white' class='bi bi-person-plus' viewBox='0 0 16 16'%3E%3Cpath d='M6 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0zm4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4zm-1-.004c-.001-.246-.154-.986-.832-1.664C9.516 10.68 8.289 10 6 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10zM13.5 5a.5.5 0 0 1 .5.5V7h1.5a.5.5 0 0 1 0 1H14v1.5a.5.5 0 0 1-1 0V8h-1.5a.5.5 0 0 1 0-1H13V5.5a.5.5 0 0 1 .5-.5z'/%3E%3C/svg%3E");
    }

    .bi-envelope {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='white' class='bi bi-envelope' viewBox='0 0 16 16'%3E%3Cpath d='M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4Zm2-1a1 1 0 0 0-1 1v.217l7 4.2 7-4.2V4a1 1 0 0 0-1-1H2Zm13 2.383-4.708 2.825L15 11.105V5.383Zm-.034 6.876-5.64-3.471L8 9.583l-1.326-.795-5.64 3.47A1 1 0 0 0 2 13h12a1 1 0 0 0 .966-.741ZM1 11.105l4.708-2.897L1 5.383v5.722Z'/%3E%3C/svg%3E");
    }

    @@media (max-width: 640.98px) {
        .user-info {
            display: none;
        }
    }

    .bi-camera-fill {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='white' class='bi bi-camera-fill' viewBox='0 0 16 16'%3E%3Cpath d='M10.5 8.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z'/%3E%3Cpath d='M2 4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-1.172a2 2 0 0 1-1.414-.586L9.828 1.828A2 2 0 0 0 8.414 1H7.586a2 2 0 0 0-1.414.586L4.586 3.414A2 2 0 0 1 3.172 4H2z'/%3E%3C/svg%3E");
    }

    .bi-images {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='white' class='bi bi-images' viewBox='0 0 16 16'%3E%3Cpath d='M4.502 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z'/%3E%3Cpath d='M14.002 13a2 2 0 0 1-2 2h-10a2 2 0 0 1-2-2V5A2 2 0 0 1 2.002 3h10a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2zM2.002 4a1 1 0 0 0-1 1v8l2.646-2.354a.5.5 0 0 1 .63-.062l2.66 1.773 3.71-3.71a.5.5 0 0 1 .577-.094l1.777 1.947V5a1 1 0 0 0-1-1h-10z'/%3E%3C/svg%3E");
    }
</style>

@code {
    private bool isUserAuthenticated = false;
    private string userEmail = "";
    private Timer? _authCheckTimer;
    private string currentLocation = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            currentLocation = Navigation.Uri;
            await CheckAuthStatus();
            
            _authCheckTimer = new Timer(async _ => 
            {
                try
                {
                    await InvokeAsync(CheckAuthStatus);
                }
                catch
                {
                    // Silent error handling
                }
            }, null, TimeSpan.Zero, TimeSpan.FromMilliseconds(500));
            
            Navigation.LocationChanged += OnLocationChanged;
        }
        catch
        {
            // Silent error handling
        }
    }

    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        try
        {
            currentLocation = e.Location;
            InvokeAsync(StateHasChanged);
        }
        catch
        {
            // Silent error handling
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await Task.Delay(100);
                await CheckAuthStatus();
            }
            catch
            {
                // Silent error handling
            }
        }
    }

    private async Task CheckAuthStatus()
    {
        try
        {
            if (AuthService == null) return;
            
            var isFirebaseLoaded = false;
            try
            {
                isFirebaseLoaded = await JSRuntime.InvokeAsync<bool>("eval", 
                    "typeof window.firebaseAuth !== 'undefined' && window.firebaseAuth !== null");
            }
            catch
            {
                isUserAuthenticated = false;
                userEmail = "";
                return;
            }
            
            if (!isFirebaseLoaded)
            {
                isUserAuthenticated = false;
                userEmail = "";
                return;
            }
            
            var user = await AuthService.GetCurrentUserAsync();
            var wasAuthenticated = isUserAuthenticated;
            
            if (user != null && !string.IsNullOrEmpty(user.Email))
            {
                isUserAuthenticated = true;
                userEmail = user.Email;
            }
            else
            {
                isUserAuthenticated = false;
                userEmail = "";
            }
            
            if (wasAuthenticated != isUserAuthenticated)
            {
                StateHasChanged();
            }
        }
        catch
        {
            isUserAuthenticated = false;
            userEmail = "";
        }
    }

    private async Task HandleLogout()
    {
        try
        {
            if (AuthService != null)
            {
                await AuthService.SignOutAsync();
            }
            
            isUserAuthenticated = false;
            userEmail = "";
            StateHasChanged();
            
            await JSRuntime.InvokeVoidAsync("location.href", "/");
        }
        catch
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("location.href", "/");
            }
            catch
            {
                Navigation.NavigateTo("/", forceLoad: true);
            }
        }
    }

    public void Dispose()
    {
        try
        {
            _authCheckTimer?.Dispose();
            Navigation.LocationChanged -= OnLocationChanged;
        }
        catch
        {
            // Silent error handling
        }
    }
}

